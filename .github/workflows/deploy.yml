name: Deploy Full Stack App to AWS EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DB_URL,DB_USERNAME,DB_PASSWORD
          script: |
            echo "Starting deployment process..."
            echo "Current directory: $(pwd)"

            # Ensure app directory exists
            if [ ! -d "/home/ec2-user/app" ]; then
              echo "Creating app directory"
              mkdir -p /home/ec2-user/app
            fi
            cd /home/ec2-user/app

            # Clone or pull repository via SSH
            if [ -d ".git" ]; then
              echo "Repository found, pulling latest changes"
              git reset --hard
              git pull origin main
            else
              echo "Cloning repository via SSH"
              git clone git@github.com:JJOK97/cleaning-guardian.git .
            fi

            # Export DB env vars for property file
            export DB_URL_VALUE="$DB_URL"
            export DB_USERNAME_VALUE="$DB_USERNAME"
            export DB_PASSWORD_VALUE="$DB_PASSWORD"

            # Build & deploy backend
            if [ -d "backend/cleaning-guardian" ]; then
              cd backend/cleaning-guardian
              echo "Backend directory contents:"
              ls -la

              mkdir -p src/main/resources
              echo "Writing application.properties"
              cat << EOL > src/main/resources/application.properties
            spring.application.name=cleaning-guardian
            server.port=8088
            server.address=0.0.0.0
            spring.messages.encoding=UTF-8
            spring.datasource.url=$DB_URL_VALUE
            spring.datasource.username=$DB_USERNAME_VALUE
            spring.datasource.password=$DB_PASSWORD_VALUE
            spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
            mybatis.mapper-locations=classpath*:com/example/demo/mapper/*.xml
            mybatis.type-aliases-package=com.example.demo.DTO
            EOL

              echo "Verifying (password masked):"
              sed "s/$DB_PASSWORD_VALUE/********/" src/main/resources/application.properties

              echo "Building with Maven"
              chmod +x mvnw
              ./mvnw clean package -DskipTests

              if systemctl list-unit-files | grep -q spring-app; then
                echo "Restarting spring-app service"
                sudo systemctl restart spring-app
              else
                echo "No systemd service found; launching jar directly"
                nohup java -jar target/cleaning-guardian-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
              fi

              cd ../..
            fi

            # Build & deploy frontend
            if [ -d "frontend" ]; then
              cd frontend
              echo "Installing npm dependencies"
              npm ci

              echo "Building frontend"
              npm run build

              if ! command -v nginx >/dev/null; then
                echo "Installing Nginx"
                sudo dnf install -y nginx
                sudo systemctl enable nginx
                sudo systemctl start nginx
              fi

              echo "Deploying to Nginx html"
              sudo cp -r build/* /usr/share/nginx/html/
              sudo systemctl reload nginx

              cd ..
            fi

            echo "Deployment completed."
