name: Deploy Full Stack App to AWS EC2
on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 옵션 추가

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: DB_URL,DB_USERNAME,DB_PASSWORD
        script: |
          # 디버깅 정보
          echo "Starting deployment process..."
          echo "Current directory: $(pwd)"
          
          # 앱 디렉토리 확인 및 생성
          if [ ! -d "/home/ec2-user/app" ]; then
            echo "Creating app directory"
            mkdir -p /home/ec2-user/app
          fi
          
          cd /home/ec2-user/app
          
          # 저장소 클론 또는 풀
          if [ -d ".git" ]; then
            echo "Git repository exists, pulling latest changes"
            git pull
          else
            echo "Cloning repository"
            git clone https://github.com/JJOK97/cleaning-guardian.git .
          fi
          
          # 백엔드 빌드 및 배포
          if [ -d "backend/cleaning-guardian" ]; then
            cd backend/cleaning-guardian
            
            # 디렉토리 구조 확인
            echo "Backend directory structure:"
            ls -la
            
            # application.properties 디렉토리 확인
            mkdir -p src/main/resources
            
            # application.properties 설정
            echo "Creating application.properties"
            cat > src/main/resources/application.properties << EOL
spring.application.name=cleaning-guardian
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
server.port=8088
server.address=0.0.0.0
spring.messages.encoding=UTF-8
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
mybatis.mapper-locations=classpath*:com/example/demo/Mapper/*.xml
mybatis.type-aliases-package=com.example.demo.DTO
EOL
            
            # Maven 빌드
            echo "Building backend with Maven"
            chmod +x ./mvnw
            ./mvnw clean package -DskipTests
            
            # 서비스 재시작
            if systemctl list-unit-files | grep -q spring-app; then
              echo "Restarting spring-app service"
              sudo systemctl restart spring-app
            else
              echo "Warning: spring-app service not found"
            fi
            
            cd ../..
          else
            echo "Backend directory not found"
          fi
          
          # 프론트엔드 빌드 및 배포
          if [ -d "frontend" ]; then
            cd frontend
            
            echo "Frontend directory structure:"
            ls -la
            
            echo "Installing npm dependencies"
            npm install
            
            echo "Building React app"
            npm run build
            
            # Nginx 설치 확인
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx"
              sudo dnf install nginx -y
              sudo systemctl enable nginx
              sudo systemctl start nginx
            fi
            
            # 빌드된 React 앱을 Nginx 디렉토리로 복사
            echo "Copying build files to Nginx html directory"
            sudo cp -r build/* /usr/share/nginx/html/
            sudo systemctl restart nginx
          else
            echo "Frontend directory not found"
          fi
          
          echo "Deployment process completed"
      env:
        DB_URL: ${{ secrets.DB_URL }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
